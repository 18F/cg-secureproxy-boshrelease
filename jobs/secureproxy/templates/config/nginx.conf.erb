user  vcap vcap;
worker_processes  2;

error_log /var/vcap/sys/log/secureproxy/secureproxy.error.log notice;
pid       /var/vcap/sys/run/secureproxy/secureproxy.pid;

worker_rlimit_nofile 40000;

events {
  worker_connections  8096;
  multi_accept        on;
  use                 epoll;
}

http {

  ##
  # Basic stuff
  ##

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 1200;
  types_hash_max_size 2048;
  server_tokens off;

  include /var/vcap/packages/secureproxy/nginx/conf/mime.types;
  default_type application/octet-stream;
  types {
    text/plain log;
    text/plain asc;
  }

  ##
  # Logging
  ##

  log_format  main  '$remote_addr - [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $request_time '
            '$upstream_response_time $pipe';

  access_log /var/vcap/sys/log/secureproxy/access.log main;

  ##
  # Gzip
  ##

  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_types  text/plain text/css application/x-javascript application/json text/xml application/xml application/xml+rss text/javascript application/rss+xml;


  ##
  # Timeout variables (currently disabled)
  ##

  # client_header_timeout   10m;
  client_body_timeout 10m;
  # send_timeout        10m;
  client_max_body_size 1024m;

  # connection_pool_size        256;
  # client_header_buffer_size   16k;
  large_client_header_buffers 4 16k;
  # request_pool_size       16k;

  # Add map for websockets
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Add secure header values if not set upstream, else add headers with the
  # implicit default value of empty string, which is ignored by the `add_header`
  # directive.
  map $upstream_http_strict_transport_security $sts {
    '' max-age=31536000;
  }
  map $upstream_http_x_frame_options $frame_options {
    '' DENY;
  }
  map $upstream_http_x_content_type_options $content_type_options {
    '' nosniff;
  }
  map $upstream_http_x_xss_protection $xss_protection {
    '' '1; mode=block';
  }
  map $upstream_http_content_type $default_content_type {
    '' 'text/plain; charset=utf-8';
  }

  lua_package_path "/var/vcap/packages/secureproxy/lualib/?.lua;/var/vcap/jobs/secureproxy/config/?.lua";

  # hack to enable startup logging
  # https://github.com/openresty/lua-nginx-module/issues/467#issuecomment-305578531
  lua_shared_dict workaround 12k;

  init_by_lua_block {
    cjson = require "cjson"
    ngx_re = require "ngx.re"
    iputils = require "resty.iputils"
    local whitelist = require "ip_whitelist"

    ip_whitelist = whitelist.get_whitelist()
    ip_whitelist_size = 0

    local info = ""
    for k,v in pairs(whitelist.get_human_whitelist()) do
      ip_whitelist_size = ip_whitelist_size + 1
      info = info..k..":\n"

      for kk, vv in ipairs(v) do
        info = info.."- "..vv.."\n"
      end
    end

    info =  "Loaded whitelist for "..ip_whitelist_size.." domains:\n"..info
    ngx.log(ngx.NOTICE, info)
    ngx.log(ngx.NOTICE, cjson.encode(ip_whitelist))
  }

  server {
    listen <%= p("secureproxy.listen_port") %>;
    set $local_proxy "http://127.0.0.1:<%= p("secureproxy.proxy_port") %>";
    set $cloud_controller "<%= p("secureproxy.cloud_controller") %>";

    server_name  _;

    # proxy all traffic
    location / {

      # redirect all http traffic to https
      if ($http_x_forwarded_proto = http) {
        return 301 https://$host$request_uri;
      }

      ##
      # Security
      ##

      add_header Strict-Transport-Security $sts always;
      add_header X-Frame-Options $frame_options always;
      add_header X-Content-Type-Options $content_type_options always;
      add_header X-XSS-Protection $xss_protection always;
      add_header Content-Type $default_content_type always;

      ##
      # Implement per-domain IP Whitelist
      ##

      access_by_lua_block {
        -- bail fast if we don't have a whitelist, or it's not a hostname that needs filtering
        if ip_whitelist_size == 0 then
          return
        end

        -- strip any port off the hostheader
        local hostname = ngx.req.get_headers()["Host"]
        port = hostname:find(":")
        if port ~= nil then
          hostname = hostname:sub(1, port-1)
        end

        -- TODO: Do we need to put this in front of things other than CC (like doppler?)
        if hostname ~= ngx.var.cloud_controller then
          return
        end

        -- skip unauthenticated URLs
        if ngx.re.match(ngx.var.request_uri, "^/v2/info") then
          return
        end

        local auth = ngx.req.get_headers()["Authorization"];
        -- if we have no auth, then bail
        if auth == nil then
          return
        end

        -- decode token, bail if we can't (malformed) or it doesn't have an email (client creds)
        local token, err = ngx_re.split(auth, "[.]")
        if err ~= nil or token[2] == nil then
          return
        end

        local decoded_token = cjson.decode(ngx.decode_base64(token[2]))
        if decoded_token.email == nil then
          return
        end

        -- extract domain from email address
        local email, err = ngx_re.split(decoded_token.email, "@")
        -- if the split failed, bail
        -- TODO: What about deployer accounts?
        if #email ~= 2 then
          ngx.log(ngx.ERR,"Skipping whitelist check. Unable to extract domain from username", cjson.encode(email))
          return
        end

        -- see if we have a whitelist registered for this domain
        if ip_whitelist[email[2]] == nil then
          return
        end

        -- where is the request coming from
        local source_ip = ngx.var.remote_addr

        -- if we have an X-Forwarded-For header then use the last one in the list instead of remote_addr
        local xff = ngx.req.get_headers()["X-Forwarded-For"]
        if xff ~= nil then
          local xffl, err = ngx_re.split(xff, ", ")
          if xffl ~= nil then
            source_ip = xffl[#xffl]
          end
        end

        if iputils.ip_in_cidrs(source_ip, ip_whitelist[email[2]]) then
          ngx.log(ngx.NOTICE, "PASS ", source_ip, " is in ", email[2], " whitelist (", decoded_token.email, ")")
          return
        else
          -- fail if the request isn't coming from a whitelisted range
          ngx.log(ngx.NOTICE, "FAIL ", source_ip, " is not in ", email[2], " whitelist (", decoded_token.email, ")")
          ngx.status = ngx.HTTP_FORBIDDEN
          ngx.header.content_type = "application/json; charset=utf-8"
          -- TODO: Should we be more informative in our error message, should we use a stock cloud controller error code
          ngx.say(cjson.encode({description="Authorization Error", error_code="SecureProxy-NotAuthorized", code=9162}))
          return ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      }

      fastcgi_param               HTTP_PROXY "";

      proxy_buffering             off;
      proxy_http_version          1.1;
      proxy_set_header            Upgrade $http_upgrade;
      proxy_set_header            Connection $connection_upgrade;
      proxy_set_header            Host $host;
      proxy_set_header            Proxy "";
      proxy_redirect              off;
      proxy_pass_request_headers  on;
      proxy_connect_timeout       10;
      proxy_read_timeout          600;
      proxy_pass                  $local_proxy;

    }

  }

  <%= p("secureproxy.custom_server_config") %>

}
